#!/usr/bin/env python

import sys
from pathlib import Path
from typing import Optional

import typer
from ruamel.yaml import YAML
from ruamel.yaml.comments import CommentedMap


def sort_yaml_preserve_comments(data, reference):
    if isinstance(data, CommentedMap):
        order = {}
        for i, key in enumerate(reference):
            order[key] = (0, i)
        for j, key in enumerate(data):
            if key not in order:
                order[key] = (1, j)

        # Create a sorted list of keys
        sorted_keys = sorted(data, key=lambda x: order[x])

        # Reorder the keys in place according to the sorted list
        for key in sorted_keys:
            data.move_to_end(key)

        # Recursively sort any nested mappings or lists
        for key in data:
            sort_yaml_preserve_comments(data[key], reference.get(key, {}))

    elif isinstance(data, list):
        for item in data:
            sort_yaml_preserve_comments(item, {})


def sort_yaml_using_reference(
    file: Path,
    reference: Path,
    output_file: Optional[Path] = typer.Option(None, "--output", "-o"),
):
    yaml = YAML()
    yaml.preserve_quotes = True

    content = yaml.load(file.read_text())
    reference = yaml.load(reference.read_text())

    # Sort the YAML content (inplace)
    sort_yaml_preserve_comments(content, reference)

    # Write the sorted YAML back to a file
    # if output_file is None print to sys.stdout

    if output_file is None:
        yaml.dump(content, sys.stdout)
    else:
        with output_file.open("w") as f:
            yaml.dump(content, f)


if __name__ == "__main__":
    typer.run(sort_yaml_using_reference)
